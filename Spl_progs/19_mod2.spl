alias functionNum R1;
if(functionNum==1) then
	breakpoint;
	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]+1;
	if([SYSTEM_STATUS_TABLE+2]==0) then
		[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+4]=WAIT_MEM;
		backup;
		call MOD_5;
		restore;
	endif;
	[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]-1;
	[SYSTEM_STATUS_TABLE+3]=[SYSTEM_STATUS_TABLE+3]-1;	
	alias i R2;
	i=0;
	while(i<128) do
		if([MEMORY_FREE_LIST+i]==0) then
		break;
		endif;
		i=i+1;
		endwhile;
	[MEMORY_FREE_LIST+i]=1;
	R0=i;	
	return;
endif;	

if(functionNum==2) then
	alias pagenumber R2;
	breakpoint;	
	[MEMORY_FREE_LIST+pagenumber]=[MEMORY_FREE_LIST+pagenumber]-1;
	breakpoint;
	if([MEMORY_FREE_LIST+pagenumber]==0) then
		[SYSTEM_STATUS_TABLE+2]=[SYSTEM_STATUS_TABLE+2]+1;
	alias i R3;
	i=0;
	while(i<16) do
		if([PROCESS_TABLE+(i*16)+4]==WAIT_MEM) then
				[PROCESS_TABLE+(i*16)+4]=READY;
		endif;
		i=i+1;
	endwhile;
	endif;
	return;
endif;		

if(functionNum==4) then
	breakpoint;
	alias blocknumber R2;	
	[DISK_FREE_LIST+blocknumber]=[DISK_FREE_LIST+blocknumber]-1;
	breakpoint;
	return;
endif;		


if(functionNum==5) then
	alias blocknumber R2;
	breakpoint;	
	alias i R3;
	alias j R4;
	alias pagenumber R5;
	i=0;
	while(i<16) do
		j=4;
		while(j<8) do 
			if([DISK_MAP_TABLE+(i*10)+j]==blocknumber ) then
				PTBR = [PROCESS_TABLE+i*16 + 14]; 
				if([PTBR + j*2]!=-1) then
					pagenumber=[PTBR + 8];
					[MEMORY_FREE_LIST+pagenumber]=[MEMORY_FREE_LIST+pagenumber]+1;
					R0=[PTBR + 8];
					return;
				endif;
			endif;
		j=j+1;
		endwhile;
	i=i+1;
	endwhile;	
	
	multipush(R0,R1,R2,R3,R4,R5);
	R1 = 1;                              //GET_FREE_PAGE
	call MOD_2;
	pagenumber =R0;
	multipop(R0,R1,R2,R3,R4,R5);
		multipush(R0,R1,R2,R3,R4,R5);
		 R1=2;
		 R2=[SYSTEM_STATUS_TABLE + 1];
		 R3=pagenumber;
		 R4=blocknumber;
		 call MOD_4;
		 multipop(R0,R1,R2,R3,R4,R5);	
	
	R0=pagenumber;
	return;
endif;				
